/**
 * Created by Mingo on 2017/5/24.
 */
import android.annotation.TargetApi;
import android.os.Build;
import android.provider.Settings;
import android.util.Log;

import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.aspectj.lang.annotation.Pointcut;

import okhttp3.FormBody;
import okhttp3.RequestBody;
@Aspect
public class postAspectj {
    ///在POST的body构造中add函数可以截获name和value值
   // private static final String METHOD_EXECUTION = "execution(* add(..))&&args(name)&&args(value)";

    public String TAG = "无关请求";

    @Pointcut("call (* okhttp3.FormBody.Builder.addEncoded(..))")
    public void methodExecution() {
   }
   //使用Before这种advice
   @Before("methodExecution()")
     //执行切片并打印log，返回参数值
    public void MethodExecution(JoinPoint joinPoint) throws Throwable {

//        Log.d("HHH","hhh");
       String name = (String) joinPoint.getArgs()[0];
       String value = (String) joinPoint.getArgs()[1];

       match(name,"log");
       match(value,"log");

    }
        /**
         * 找出指定字符串在目标字符串中的位置
         *
         * @param source 目标字符串
         * @param pattern 指定字符串
         * @return 指定字符串在目标字符串中的位置
         */
        public static int match(String source, String pattern) {
            int index = -1;
            boolean match = true;

            for (int i = 0, len = source.length() - pattern.length(); i <= len; i++) {
                match = true;

                for (int j = 0; j < pattern.length(); j++) {
                    if (source.charAt(i + j) != pattern.charAt(j)) {
                        match = false;
                        break;
                    }
                }

                if (match) {
                    Log.e("无关请求", source);
                    break;
                }
            }
            return 0;
        }
}
